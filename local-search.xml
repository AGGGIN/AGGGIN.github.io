<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微习惯</title>
    <link href="/2021/06/29/%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%B9%A0%E6%83%AF/"/>
    <url>/2021/06/29/%E7%AC%94%E8%AE%B0/%E5%BE%AE%E4%B9%A0%E6%83%AF/</url>
    
    <content type="html"><![CDATA[<p>微习惯的八大规则</p><ol><li><p>绝不要自欺欺人</p></li><li><p>满意每一个进步</p></li><li><p>经常回报自己，尤其在完成微习惯后</p></li><li><p>保持头脑清醒</p></li><li><p>感到强烈抵触时，退后并缩小目标</p></li><li><p>提醒自己这件事很轻松</p></li><li><p>绝不要小看微步骤</p></li><li><p>多余精力超额完成任务，而不是制定更大的目标</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Just4Fun</title>
    <link href="/2021/06/28/%E7%AC%94%E8%AE%B0/Just4Fun/"/>
    <url>/2021/06/28/%E7%AC%94%E8%AE%B0/Just4Fun/</url>
    
    <content type="html"><![CDATA[<p>简洁需要良好的设计和卓然的品位，要做到简洁可一点都不容易。</p><p>理查德•斯托曼算得上是自由软件的缔造者了。早在1984年，他就已经着手研究一个可以替代 Unix 的系统。他把这个系统叫做 “GNU”。GNU是“GNU 系统不是 Unix 系统”(GNU is Not Unix）的首字母缩写。这是一个递归式的首字母缩写词，即缩写词也出现在全称里。这种循环首字母缩写的冷笑话只有在计算机圈内才有市场，一般人都不觉得好笑。极客们总是能产生很多这样的笑料。</p><p>我还是很难解释清楚，闭门三天冥思苦想却徒劳无功，找不到一个漂亮的好方法来解决难题，这编程到底有什么好着迷的？其实，一旦找到了解决向题的那个漂亮方法，那种感觉就会是无与伦比的。</p><p>我的操作系统内核首先要做的不是启动 init 进程，而是启动 shell程序。之前提过，我已经实现了大概 25 个系统调用，但shell 程序才是我真正要运行的第一个程序。但我没有去编shell，我下载了一个 Bourne shell 的克隆版，叫 Bourne-Again shell，把它复制在一张磁盘上。它是Unix 系统早期的一个shell，可以从互联网上免费下载。这名字来源于一个糟糕的双关语：编写 Boure shell 的人名叫伯恩（Boume ），而这个克隆版叫做 Boure-Again shell (Bom-Again ：再生），这也就是后来通常被称为bash 的shell。</p><p>娱乐不一定非得是指某些老掉牙的东西。它可以是一场国际象棋比赛，也可以是一次对，“世界如何运转” 这个问题的思考，还可以是对新世界的好奇和探索。娱乐能驱使人们为了从外太空看清地球的面貌，而自愿坐在一支装着数亿磅烈性炸药的狭窄火箭里，所以娱乐当然可以称作“动机”。</p><p>是的，你应该奋斗，但生活的最终目的是为了享受乐趣。</p>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>从零开始用Parcel搭建Ract环境</title>
    <link href="/2021/06/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8Parcel%E6%90%AD%E5%BB%BARact%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/06/22/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%94%A8Parcel%E6%90%AD%E5%BB%BARact%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>为什么要选Parcel？因为它很轻量化，几乎不需要配置，开箱即用，非常适合写demo。你想用什么写就用什么写，其他的事情交给Parcel就好了。<span id="more"></span></p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── App<span class="hljs-selector-class">.js</span><br>├── App<span class="hljs-selector-class">.less</span><br>├── README<span class="hljs-selector-class">.md</span><br>├── Routes<br>│   ├── PrivateRoute<span class="hljs-selector-class">.js</span><br>│   └── index<span class="hljs-selector-class">.js</span><br>├── index<span class="hljs-selector-class">.html</span><br>├── index<span class="hljs-selector-class">.js</span><br>├── package-lock<span class="hljs-selector-class">.json</span><br>├── package<span class="hljs-selector-class">.json</span><br>└── <span class="hljs-attribute">src</span><br>    ├── components<br>    ├── layout<br>    │   └── TabContainer<span class="hljs-selector-class">.js</span><br>    ├── pages<br>    │   ├── Home<br>    │   │   └── index<span class="hljs-selector-class">.js</span><br>    │   ├── List<br>    │   │   └── index<span class="hljs-selector-class">.js</span><br>    │   ├── Login<br>    │   │   └── index<span class="hljs-selector-class">.js</span><br>    │   └── User<br>    │       └── index<span class="hljs-selector-class">.js</span><br>    ├── store<br>    │   ├── index<span class="hljs-selector-class">.js</span><br>    │   └── user<span class="hljs-selector-class">.js</span><br>    └── utils<br></code></pre></td></tr></table></figure><h1 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h1><p>先创建一个<code>package.json</code></p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-comment"># 先创建一个 package.json</span><br>$ <span class="hljs-built_in">npm</span> init -y<br><br><span class="hljs-comment"># 安装依赖</span><br>$ <span class="hljs-built_in">npm</span> i parcel-bundler react react-dom redux react-redux react-router-dom tailwindcss antd antd-mobile -S<br></code></pre></td></tr></table></figure><p>依赖主要分成几个，一个是打包工具Parcel，一个是React以及它的生态插件，还有就是样式以及UI框架相关的依赖，如果你全局装了parcel，项目里可以不装。</p><h2 id="最简单的React环境"><a href="#最简单的React环境" class="headerlink" title="最简单的React环境"></a>最简单的React环境</h2><p>创建<code>index.html</code>和<code>index.js</code>然后引入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- index.html --&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>React<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure><p>但是我们平时写项目也不是一股脑地用ReactDOM.render里扔东西的，一般都是有一个APP组件，然后渲染这个组件，挂载到<code>#app</code>这个DOM上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br>ReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span>, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>));<br></code></pre></td></tr></table></figure><h1 id="Layout和路由跳转"><a href="#Layout和路由跳转" class="headerlink" title="Layout和路由跳转"></a>Layout和路由跳转</h1><p>接下来试试实现，用<code>antd-mobile</code> 的导航栏实现路由切换页面。首先需要实现一个通用的布局，然后页面使用这个布局，往里面插入子节点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/layout/TabContainer.js</span><br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; TabBar &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;antd-mobile&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; withRouter &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; UserOutlined, HomeOutlined &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@ant-design/icons&quot;</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TabbarContainer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.state = &#123;<br>      <span class="hljs-attr">selectedTab</span>: <span class="hljs-built_in">this</span>.props.location.pathname,<br>      <span class="hljs-attr">hidden</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">fullScreen</span>: <span class="hljs-literal">false</span>,<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; children &#125; = <span class="hljs-built_in">this</span>.props;<br>    <span class="hljs-keyword">const</span> pathname = children.props;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;flex h-full justify-between flex-col&quot;</span>&gt;</span></span><br><span class="xml">        &#123;children&#125;</span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;footer order-last&quot;</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">TabBar</span>&gt;</span></span><br><span class="xml">            &#123;Config.map((item) =&gt; (</span><br><span class="xml">              <span class="hljs-tag">&lt;<span class="hljs-name">TabBar.Item</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">icon</span>=<span class="hljs-string">&#123;item.icon&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.link&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">selectedIcon</span>=<span class="hljs-string">&#123;item.icon&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;item.title&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">selected</span>=<span class="hljs-string">&#123;this.state.selectedTab</span> === <span class="hljs-string">item.link&#125;</span></span></span><br><span class="hljs-tag"><span class="xml">                <span class="hljs-attr">onPress</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> &#123;</span><br><span class="xml">                  this.setState(&#123;</span><br><span class="xml">                    selectedTab: item.link,</span><br><span class="xml">                  &#125;);</span><br><span class="xml">                  this.props.history.push(item.link);</span><br><span class="xml">                &#125;&#125;</span><br><span class="xml">              &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">TabBar.Item</span>&gt;</span></span><br><span class="xml">            ))&#125;</span><br><span class="xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">TabBar</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> Config = [<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;首页&quot;</span>,<br>    <span class="hljs-attr">link</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">HomeOutlined</span> /&gt;</span></span>,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;我的&quot;</span>,<br>    <span class="hljs-attr">link</span>: <span class="hljs-string">&quot;/user&quot;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">UserOutlined</span> /&gt;</span></span>,<br>  &#125;,<br>];<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withRouter(TabbarContainer);<br><br></code></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// src/pages/Home/index.js</span><br><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-type">Container</span> from <span class="hljs-string">&quot;../../layout/TabContainer&quot;</span>;<br>export <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Home</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>  render() &#123;<br>    <span class="hljs-keyword">return</span> (<br>      &lt;<span class="hljs-type">Container</span>&gt;<br>        &lt;div&gt;<span class="hljs-type">Home</span>&lt;/div&gt;<br>      &lt;/<span class="hljs-type">Container</span>&gt;<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不用<code>&lt;Link&gt;</code>标签跳转切换组件，则要将<code>react-router </code>的 <code>history</code>、<code>location</code>、<code>match</code> 三个对象传入props对象上，所以要用<code>withRouter</code>，这样就能在<code>props</code>属性中使用路由的方法了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Routes/index.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/Home&quot;</span>;<br><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/User&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Routes</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;User&#125;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Routes;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// App.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> Routes <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Routes&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Routes</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> App;<br></code></pre></td></tr></table></figure><h1 id="Store和路由鉴权"><a href="#Store和路由鉴权" class="headerlink" title="Store和路由鉴权"></a>Store和路由鉴权</h1><p>有一些页面是没有登录不允许访问的，可以在路由里做判断。</p><p>新建一个<code>PrivateRoute.js</code>，没有登录则跳转到登录页。如果是已经登录了就跳转到去的页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Routes/PrivateRoute.js</span><br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Redirect, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; user &#125;</span>) =&gt;</span> (&#123; user &#125;))(<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrivateRoute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-attr">user</span>: &#123; isLogin &#125;,<br>        path,<br>        component,<br>      &#125; = <span class="hljs-built_in">this</span>.props;<br>      <span class="hljs-keyword">if</span> (isLogin) &#123;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&#123;path&#125;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;component&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span></span></span><br><span class="hljs-tag"><span class="xml">          <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">pathname:</span> &quot;/<span class="hljs-attr">login</span>&quot;,</span></span><br><span class="hljs-tag"><span class="xml">            <span class="hljs-attr">state:</span> &#123; <span class="hljs-attr">Redirect:</span> <span class="hljs-attr">location.pathname</span> &#125;,</span></span><br><span class="hljs-tag"><span class="xml">          &#125;&#125;</span></span><br><span class="hljs-tag"><span class="xml">        &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span></span><br>      );<br>    &#125;<br>  &#125;<br>);<br><br><span class="hljs-comment">// Routes/index.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; BrowserRouter <span class="hljs-keyword">as</span> Router, Route, Switch &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><span class="hljs-keyword">import</span> PrivateRoute <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./PrivateRoute&quot;</span>;<br><span class="hljs-keyword">import</span> Home <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/Home&quot;</span>;<br><span class="hljs-keyword">import</span> User <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/User&quot;</span>;<br><span class="hljs-keyword">import</span> Login <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/Login&quot;</span>;<br><span class="hljs-keyword">import</span> List <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../src/pages/List&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Routes</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span>&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">exact</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Home&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/login&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;Login&#125;</span> /&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">PrivateRoute</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;User&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">PrivateRoute</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/list&quot;</span> <span class="hljs-attr">component</span>=<span class="hljs-string">&#123;List&#125;</span> /&gt;</span></span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Switch</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">Router</span>&gt;</span></span><br>  );<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Routes;<br></code></pre></td></tr></table></figure><p><code>isLogin</code>是一个全局的状态，当这个状态更新之后组件也会更新。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">// src/store/index.js</span><br><span class="hljs-meta"><span class="hljs-meta-keyword">import</span> &#123; createStore, combineReducers &#125; from &quot;redux&quot;;</span><br><br><span class="hljs-keyword">const</span> initalState = &#123;<br>  isLogin: <span class="hljs-literal">false</span>,<br>  userInfo: &#123;&#125;,<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userReducer</span><span class="hljs-params">(state = &#123; <span class="hljs-rest_arg">...initalState</span> &#125;, action)</span> </span>&#123;<br>  <span class="hljs-keyword">switch</span> (action.type) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;loginSuccess&quot;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        isLogin: <span class="hljs-literal">true</span>,<br>        userInfo: &#123; name: <span class="hljs-string">&quot;AG&quot;</span> &#125;,<br>      &#125;;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-keyword">return</span> &#123; ...state &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(combineReducers(&#123; user: userReducer &#125;));<br>export <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;antd-mobile/dist/antd-mobile.css&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;tailwindcss/dist/tailwind.css&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Provider &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./src/store&quot;</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App&quot;</span>;<br><br>ReactDOM.render(<br>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Provider</span> <span class="hljs-attr">store</span>=<span class="hljs-string">&#123;store&#125;</span>&gt;</span></span><br><span class="xml">    <span class="hljs-tag">&lt;<span class="hljs-name">App</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">App</span>&gt;</span></span><br><span class="xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Provider</span>&gt;</span></span>,<br>  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;app&quot;</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="测试一下State是否更新"><a href="#测试一下State是否更新" class="headerlink" title="测试一下State是否更新"></a>测试一下State是否更新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// src/pages/Login/index.js</span><br><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-redux&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; Redirect, Route &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-router-dom&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> connect(<span class="hljs-function">(<span class="hljs-params">&#123; user &#125;</span>) =&gt;</span> (&#123; user &#125;), &#123;<br>  <span class="hljs-attr">loginClick</span>: <span class="hljs-function">() =&gt;</span> (&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;loginSuccess&quot;</span> &#125;),<br>&#125;)(<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PrivateRoute</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123;<br>        loginClick,<br>        <span class="hljs-attr">user</span>: &#123; isLogin &#125;,<br>        component,<br>      &#125; = <span class="hljs-built_in">this</span>.props;<br>      <span class="hljs-keyword">if</span> (isLogin) &#123;<br>      <span class="hljs-comment">// 从哪来回哪去</span><br>        <span class="hljs-keyword">const</span> redirect = location.state ? location.state.redirect : <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Redirect</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&#123;redirect&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Redirect</span>&gt;</span></span>;<br>      &#125;<br>      <span class="hljs-keyword">return</span> (<br>        <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="xml">          <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;loginClick&#125;</span>&gt;</span>Login<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>      );<br>    &#125;<br>  &#125;<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>Parcel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac上的便签</title>
    <link href="/2021/06/10/%E7%A5%9E%E7%A5%9E%E5%8F%A8%E5%8F%A8/Mac%E4%B8%8A%E7%9A%84%E4%BE%BF%E7%AD%BE/"/>
    <url>/2021/06/10/%E7%A5%9E%E7%A5%9E%E5%8F%A8%E5%8F%A8/Mac%E4%B8%8A%E7%9A%84%E4%BE%BF%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<p>之前一直觉得这个应用很没有存在感，因为苹果自带的记笔记的软件就蛮多的。而我自己又会下载很多第三方应用来记录各类文字，笔记、创作、规划、灵感、想法甚至编程，都各不相同。<span id="more"></span></p><p>比如，先博客文章和文档我用的是Typora/Quiver，有时候也用VSCode。编程大项目用的是IDEA，小项目、刷题和demo用的还是VSCode。手机/ipad上编程的机会就很少了，一般就是刷题和写一些脚本用的是JSBox。记录灵感用和规划用的是滴答清单，如果是用手机/ipad打草稿、选词会用Taio。可以看出每个应用在各自的平台和擅长的领域各司其职，那便签还有什么应用场景没有覆盖到呢？</p><h3 id="文本编辑、备忘录、便签"><a href="#文本编辑、备忘录、便签" class="headerlink" title="文本编辑、备忘录、便签"></a>文本编辑、备忘录、便签</h3><p>这三个都是Mac自带的应用，他们都有啥区别呢？</p><p>文本编辑有点类似于window的记事本，可以用来格式化富文本，不过我用的比较少，短的文本直接在alfred粘贴剪切就好了，长的文本一般是代码，编辑器也不许你用那么花哨的富文本。</p><p>备忘录功能就多了，支持MarkDown而且多端同步数据，iPad这次15的更新更是对用笔的用户很友好，但是我还是没怎么用起来，主要自己写画太丑了。</p><p>便签支持富文本并且有一个最大的优点，就是窗口可以浮动在最前面。<br>这可太有用了，比如我最近在尝试学习双拼提升自己的打字速度，这篇文章就是用双拼码的。码表我至今还是背不熟。刚开始学双拼的时候想用便签纸抄了一遍，打字的时候好对着敲。抄到一半，一是觉得太久没写字了抄的不好看，二是实体便签如果固定粘在笔记本触控板旁边的托盘上，我的手容易挡住，粘在其他地方次数多了容易掉。就想PC上有没有类似便签的应用，结果发现了便签这一神器完美地解决了我的需求。</p><p><img src="https://pan-1253226899.cos.ap-hongkong.myqcloud.com/images/20210620015145.png" alt="小鹤双拼x便签"></p>]]></content>
    
    
    <categories>
      
      <category>神神叨叨</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从零开始配置一台服务器</title>
    <link href="/2021/06/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/06/04/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E9%85%8D%E7%BD%AE%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h2><p>拿到服务器默认会给你一个很随机的hostname，那么第一步首先是修改hostname，其实只要多窗口的时候你分得清你在哪一台服务器上操作就可以了， 我的习惯一般是地区-系统，比如HK-Debian。因为CentOS红帽不维护了，所以最近转用Debian，顺便记录一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hostnamectl set-hostname HK-Debian</span><br></code></pre></td></tr></table></figure><p>修改的hostname不会立刻生效需要重启一下，但是不着急重启，可以把免密登录昨晚再重启这样就不用再输入一遍账号密码了。</p><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><p>首先先要在本地生成公钥私钥</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># 创建密钥</span><br><span class="hljs-variable">$ </span>ssh-keygen -t rsa<br><br><span class="hljs-comment"># 如果没有添加注释，创建时会使用本机名，系统会生产公钥文件</span><br><span class="hljs-variable">$ </span>cat ~<span class="hljs-regexp">/.ssh/id</span>_rsa.pub<br><br><span class="hljs-comment"># 添加注释可以添加参数-C</span><br><span class="hljs-variable">$ </span>ssh-keygen -t rsa -C <span class="hljs-string">&quot;注释内容&quot;</span><br></code></pre></td></tr></table></figure><p>然后把生成的公钥粘贴到服务器上的<code>~/.ssh/authorized_keys</code>里。</p><h2 id="修改ssh的登录端口"><a href="#修改ssh的登录端口" class="headerlink" title="修改ssh的登录端口"></a>修改ssh的登录端口</h2><p>用<code>lastb</code>命令可以看出每天都有人尝试在用ssh远程登录你的服务器，修改ssh默认端口是一个很常用的做法，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 修改sshd_config里的Port</span><br><span class="hljs-meta">$</span><span class="bash"> vim /etc/ssh/sshd_config</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 把登录失败的记录清除掉</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/btmp</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 把登录成功的记录也清除掉</span><br><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">echo</span> &gt; /var/<span class="hljs-built_in">log</span>/wtmp</span><br><br></code></pre></td></tr></table></figure><h2 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h2><p>如果你不是不更新不舒服斯基，用<code>apt update</code>看看有什么软件需要更新，针对性的更新就可以了。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">$ apt <span class="hljs-meta">update</span> <span class="hljs-variable">&amp;&amp;</span> apt upgrade<br></code></pre></td></tr></table></figure><h2 id="安装常用的软件"><a href="#安装常用的软件" class="headerlink" title="安装常用的软件"></a>安装常用的软件</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>基本上按着<a href="https://docs.docker.com/engine/install/debian/">参考文档</a>来就可以了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 卸载旧版本的Docker</span><br>$ apt-get remove docker docker-engine docker.io containerd runc<br><br><span class="hljs-comment"># 安装一些依赖包</span><br>$ apt-get install \<br>    apt-transport-https \<br>    ca-certificates \<br>    curl \<br>    gnupg \<br>    lsb-release<br>    <br><span class="hljs-comment"># 添加Docker的官方密钥</span><br>$ curl -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>debian<span class="hljs-regexp">/gpg | gpg --dearmor -o /u</span>sr<span class="hljs-regexp">/share/</span>keyrings/docker-archive-keyring.gpg<br><br><span class="hljs-comment"># 设置稳定版的源</span><br>$ echo \<br>  <span class="hljs-string">&quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \</span><br><span class="hljs-string">  $(lsb_release -cs) stable&quot;</span> | tee <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list.d/</span>docker.list &gt; <span class="hljs-regexp">/dev/</span>null<br>  <br><span class="hljs-comment"># 更新</span><br>$ apt update<br><br><span class="hljs-comment"># 安装</span><br>$ apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://git-scm.com/download/linux">参考文档</a></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ apt install software-properties-common<br>$<span class="hljs-built_in"> add-apt-repository </span>ppa:git-core/ppa<br>$ apt update<br>$ apt install git<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一些约定俗成</title>
    <link href="/2021/06/01/%E4%B8%80%E4%BA%9B%E7%BA%A6%E5%AE%9A%E4%BF%97%E6%88%90/"/>
    <url>/2021/06/01/%E4%B8%80%E4%BA%9B%E7%BA%A6%E5%AE%9A%E4%BF%97%E6%88%90/</url>
    
    <content type="html"><![CDATA[<p>关于中文文案如何排版可以参考这篇<a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a>。<br>我写博客的时候会大量用到MarkDown中的代码块，在代码块里有一些小细节，可以说是先跟大家说好以免造成阅读困难的问题。<span id="more"></span></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 这个一般是注释的意思，有时候也会值root用户，但是为了避免混淆尽量不用</span><br>$ 这个是在命令行里输入的意思，$指的是当前用户<br><span class="hljs-comment"># 如果前面什么都没有，那可能是命令行的返回，比如</span><br>$ git <span class="hljs-keyword">help</span><br>usage: git [<span class="hljs-params">--version</span>] [<span class="hljs-params">--help</span>] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]<br>           [<span class="hljs-params">--exec-path</span>[=&lt;path&gt;]] [<span class="hljs-params">--html-path</span>] [<span class="hljs-params">--man-path</span>] [<span class="hljs-params">--info-path</span>]<br>           [-p | <span class="hljs-params">--paginate</span> | -P | <span class="hljs-params">--no-pager</span>] [<span class="hljs-params">--no-replace-objects</span>] [<span class="hljs-params">--bare</span>]<br>           [<span class="hljs-params">--git-dir=</span>&lt;path&gt;] [<span class="hljs-params">--work-tree=</span>&lt;path&gt;] [<span class="hljs-params">--namespace=</span>&lt;name&gt;]<br>           &lt;<span class="hljs-keyword">command</span>&gt; [&lt;args&gt;]<br></code></pre></td></tr></table></figure><p>顺便一提，命令行的语法格式</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-variable">&lt;&gt;</span> 必选参数，<span class="hljs-variable">&lt;arg1 | arg2&gt;</span><br>&#123;&#125; 必选值，[-option &#123;arg1 |<span class="hljs-string"> arg2 </span>|<span class="hljs-string"> arg3&#125;]</span><br><span class="hljs-string">[] 可选参数，[-option1] [-option2] [-option3]</span><br><span class="hljs-string">() 默认值，&#123;(default) </span>|<span class="hljs-string"> arg1 </span>|<span class="hljs-string"> arg2&#125;</span><br><span class="hljs-string"></span>|<span class="hljs-string">互斥，[-option1 </span>|<span class="hljs-string"> -option2 </span>|<span class="hljs-string"> -option3]</span><br><span class="hljs-string">...可以为先前的属性指定多个值</span><br><span class="hljs-string">\命令换到下一行，不应该在此处中断命令语法</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>神神叨叨</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
